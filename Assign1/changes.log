diff --git a/Assign1/changes.log b/Assign1/changes.log
index 6008a4b..e69de29 100644
--- a/Assign1/changes.log
+++ b/Assign1/changes.log
@@ -1,842 +0,0 @@
-diff --git a/Assign1/changes.log b/Assign1/changes.log
-index 2e24f29..e69de29 100644
---- a/Assign1/changes.log
-+++ b/Assign1/changes.log
-@@ -1,561 +0,0 @@
--diff --git a/Assign1/changes.log b/Assign1/changes.log
--index 17e956c..e69de29 100644
----- a/Assign1/changes.log
--+++ b/Assign1/changes.log
--@@ -1,280 +0,0 @@
---diff --git a/setupUpdate b/setupUpdate
---index 4e5b9de..7929e83 100644
------ a/setupUpdate
---+++ b/setupUpdate
---@@ -15,6 +15,8 @@ echo "Enter git repo for sync"
--- read p
--- echo "Repo: " $p >> update.sc
--- 
---+git clone "$p"
---+
--- echo "Enter git username"
--- read p
--- echo "User: " $p >> update.sc   
---diff --git a/update b/update
---index afbee83..3ec1bb6 100644
------ a/update
---+++ b/update
---@@ -6,137 +6,129 @@ Space="\t\t\t\t\t\t\t"
--- Format=${Space}${Green}
--- Home=$(pwd)												#Executes Pwd so the Dir does not change while running
--- DefaultGitMsg="Default commit message"									#This is used if the -m flag is not given
----UpdateFreq=$(grep "Update:" update.sc | sed 's/.\{9\}//')
--- 
----for (( ; ; ))
----do
----
----	if [[ $1 = "help" ]]
----	then
----		cat testScrMan
----		exit 0
----	fi
---+if [[ $1 = "help" ]]
---+then
---+	cat testScrMan
---+	exit 0
---+fi
--- 
--- 
----	file=./update.sc
----	if [ -e "$file" ]
----	then
----		echo "Config File Loaded"
----	else 
----		echo "Config Not found!"
----		echo "Starting Setup"
----		./setupUpdate
----		exit 0
----	fi
---+file=./configData
---+if [ -e "$file" ]
---+then
---+    echo "Config File Loaded"
---+else 
---+	echo "Config Not found!"
---+	echo "Starting Setup"
---+	./setupUpdate
---+	exit 0
---+fi
--- 
----	if [[ $1 == *"i"* ]]
----	then
----		cd $Home											# CD to script root for no apparent reason 
----		./funProjectAnalyze.sh										#(Huge problem having both modes in one script. Mostly related to args now working)
----		exit 0              										# Exit when the functional script is closed
----	fi
---+if [[ $1 == *"i"* ]]
---+then
---+	cd $Home											# CD to script root for no apparent reason 
---+	./funProjectAnalyze.sh										#(Huge problem having both modes in one script. Mostly related to args now working)
---+	exit 0              										# Exit when the functional script is closed
---+fi
--- 
----	echo "Root directory is set to: ${Home}"
----	if [[ $1 == *"t"* ]]
----	then
----		cat startupData |
----		while read stuffToDo
----		do
----				echo -e "${stuffToDo}${Format}[OK]${White}" 						#Loops through a textfile inserting it before the [OK]
----			sleep 0.5
----		done
----	fi
---+echo "Root directory is set to: ${Home}"
---+if [[ $1 == *"t"* ]]
---+then
---+	cat startupData |
---+	while read stuffToDo
---+	do
---+        	echo -e "${stuffToDo}${Format}[OK]${White}" 						#Loops through a textfile inserting it before the [OK]
---+		sleep 0.5
---+	done
---+fi
--- 
----	git status
---+git status
--- 
----	if [[ $1 == *"s"* ]]
----	then
----		echo "What tag should I look for?"
----		read toFind
----		grep --exclude="$toFind" -r "$toFind" . > $toFind
----	fi
---+if [[ $1 == *"s"* ]]
---+then
---+	echo "What tag should I look for?"
---+	read toFind
---+	grep --exclude="$toFind" -r "$toFind" . > $toFind
---+fi
--- 
----	if [[ $1 == *"d"* ]]
----	then
----			echo "Please enter a file name"
----			read fileName											#Could get input with flags although cleaner to do while running
----			echo "Enter default text"
----			read defaultText
----			cat workingTree.log |
----			while read targetDir 										#ToDo check if file already exists. Have flag for overwrite
----			do
----			
----					echo "Creating file ${fileName} in ${targetDir}"
----					cd $targetDir
----					touch ${fileName}
----			if [[ $1 == *"a"* ]]
----			then
----				echo ${defaultText} >> ${fileName}
----			else
----						echo ${defaultText} > ${fileName}
----			fi
----					cd ${Home}
----			done
----	fi
---+if [[ $1 == *"d"* ]]
---+then
---+        echo "Please enter a file name"
---+        read fileName											#Could get input with flags although cleaner to do while running
---+        echo "Enter default text"
---+        read defaultText
---+        cat workingTree.log |
---+        while read targetDir 										#ToDo check if file already exists. Have flag for overwrite
---+        do
---+		
---+                echo "Creating file ${fileName} in ${targetDir}"
---+                cd $targetDir
---+                touch ${fileName}
---+		if [[ $1 == *"a"* ]]
---+		then
---+			echo ${defaultText} >> ${fileName}
---+		else
---+                	echo ${defaultText} > ${fileName}
---+		fi
---+                cd ${Home}
---+        done
---+fi
--- 
----	if [[ $1 == *"q"* ]]
---+if [[ $1 == *"q"* ]]
--- 	then
----		echo "Staring Add Files"
----		git status -s | grep "?? \| M \|M \|MM " | sed 's/.\{3\}//' |  			  	        	 #Sed is magic. Please don't touch
----		while read stuffToAdd
---+	echo "Staring Add Files"
---+	git status -s | grep "?? \| M \|M \|MM " | sed 's/.\{3\}//' |  			  	        	 #Sed is magic. Please don't touch
---+	while read stuffToAdd
---+	do
---+		find -name $(basename ${stuffToAdd}) -printf '%h\n' |  						#This finds the files and leaves just the path
---+		while read inDir
--- 		do
----			find -name $(basename ${stuffToAdd}) -printf '%h\n' |  						#This finds the files and leaves just the path
----			while read inDir
----			do
----				cd ${inDir}
----				if [ -e $(basename "$stuffToAdd") ]							#File does not exist
---+			cd ${inDir}
---+			if [ -e $(basename "$stuffToAdd") ]							#File does not exist
---+			then
---+				CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 				#Going two sub-shells deep
---+				if [ "$CheckTag" != "#ignore" ]
--- 				then
----					CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 				#Going two sub-shells deep
----					if [ "$CheckTag" != "#ignore" ]
----					then
----							echo "Adding $(basename "$stuffToAdd") in ${inDir}"
----								git add $(basename "$stuffToAdd")                       #Basename to get rid of the path
----					else
----							echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
----					fi
---+						echo "Adding $(basename "$stuffToAdd") in ${inDir}"
---+							git add $(basename "$stuffToAdd")                       #Basename to get rid of the path
---+				else
---+						echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
--- 				fi
----				cd $Home
----			done
---+			fi
--- 			cd $Home
--- 		done
---+		cd $Home
---+	done
--- 
----		echo "Starting remove files"
----		git status -s | grep " D " | sed 's/.\{3\}//' | 							#Space needed
----		while read stuffToRm
----		do
----				git rm -f ${stuffToRm}
----		done
----	fi
---+	echo "Starting remove files"
---+	git status -s | grep " D " | sed 's/.\{3\}//' | 							#Space needed
---+	while read stuffToRm
---+	do
---+			git rm -f ${stuffToRm}
---+	done
---+fi
--- 
----	if [[ $1 == *"q"* ]]
----	then
----		echo -e "\n\n\nUpdated git status (To Update please use the -u flag)"						#All code that changes files should be above here
----		echo "---------------------------------"
----		git status
----	fi
---+if [[ $1 == *"q"* ]]
---+then
---+	echo -e "\n\n\nUpdated git status (To Update please use the -u flag)"						#All code that changes files should be above here
---+	echo "---------------------------------"
---+	git status
---+fi
--- 
----	if [[ $1 == *"q"* ]]
----	then
----			if [[ $1 == *"q"* ]]
----			then
----					echo "Sending commit with message ${2}"
----					git commit -m "${2}"
----		else
----			echo "Sending commit with default message"
----				git commit -m "$DefaultGitMsg"									#Set at the top of the program
----			fi
----	fi
---+if [[ $1 == *"q"* ]]
---+then
---+        if [[ $1 == *"q"* ]]
---+        then
---+                echo "Sending commit with message ${2}"
---+                git commit -m "${2}"
---+	else
---+		echo "Sending commit with default message"
---+        	git commit -m "$DefaultGitMsg"									#Set at the top of the program
---+        fi
---+fi
--- 
----	if [[ $1 == *"q"* ]]
----	then
----		git push
----	fi
----	
----	echo "Sleeping for " $UpdateFreq " Seconds"
----	sleep $UpdateFreq
----done
---\ No newline at end of file
---+if [[ $1 == *"q"* ]]
---+then
---+	git push
---+fi
---
---
---[0;32mNew and Modified[1;37m
---../setupUpdate
---../update
---../.update.swp
---changes.log
---error.log
---todo.log
---workingTree.log
---../Elm/Hand Assembly.iam
---../Elm/fast.elm
---../Night in the Woods/
---../changes.log
---
---
---[0;32mRemoved files:[1;37m
--diff --git a/setupUpdate b/setupUpdate
--index 4e5b9de..7929e83 100644
----- a/setupUpdate
--+++ b/setupUpdate
--@@ -15,6 +15,8 @@ echo "Enter git repo for sync"
-- read p
-- echo "Repo: " $p >> update.sc
-- 
--+git clone "$p"
--+
-- echo "Enter git username"
-- read p
-- echo "User: " $p >> update.sc   
--diff --git a/update b/update
--index afbee83..3ec1bb6 100644
----- a/update
--+++ b/update
--@@ -6,137 +6,129 @@ Space="\t\t\t\t\t\t\t"
-- Format=${Space}${Green}
-- Home=$(pwd)												#Executes Pwd so the Dir does not change while running
-- DefaultGitMsg="Default commit message"									#This is used if the -m flag is not given
---UpdateFreq=$(grep "Update:" update.sc | sed 's/.\{9\}//')
-- 
---for (( ; ; ))
---do
---
---	if [[ $1 = "help" ]]
---	then
---		cat testScrMan
---		exit 0
---	fi
--+if [[ $1 = "help" ]]
--+then
--+	cat testScrMan
--+	exit 0
--+fi
-- 
-- 
---	file=./update.sc
---	if [ -e "$file" ]
---	then
---		echo "Config File Loaded"
---	else 
---		echo "Config Not found!"
---		echo "Starting Setup"
---		./setupUpdate
---		exit 0
---	fi
--+file=./configData
--+if [ -e "$file" ]
--+then
--+    echo "Config File Loaded"
--+else 
--+	echo "Config Not found!"
--+	echo "Starting Setup"
--+	./setupUpdate
--+	exit 0
--+fi
-- 
---	if [[ $1 == *"i"* ]]
---	then
---		cd $Home											# CD to script root for no apparent reason 
---		./funProjectAnalyze.sh										#(Huge problem having both modes in one script. Mostly related to args now working)
---		exit 0              										# Exit when the functional script is closed
---	fi
--+if [[ $1 == *"i"* ]]
--+then
--+	cd $Home											# CD to script root for no apparent reason 
--+	./funProjectAnalyze.sh										#(Huge problem having both modes in one script. Mostly related to args now working)
--+	exit 0              										# Exit when the functional script is closed
--+fi
-- 
---	echo "Root directory is set to: ${Home}"
---	if [[ $1 == *"t"* ]]
---	then
---		cat startupData |
---		while read stuffToDo
---		do
---				echo -e "${stuffToDo}${Format}[OK]${White}" 						#Loops through a textfile inserting it before the [OK]
---			sleep 0.5
---		done
---	fi
--+echo "Root directory is set to: ${Home}"
--+if [[ $1 == *"t"* ]]
--+then
--+	cat startupData |
--+	while read stuffToDo
--+	do
--+        	echo -e "${stuffToDo}${Format}[OK]${White}" 						#Loops through a textfile inserting it before the [OK]
--+		sleep 0.5
--+	done
--+fi
-- 
---	git status
--+git status
-- 
---	if [[ $1 == *"s"* ]]
---	then
---		echo "What tag should I look for?"
---		read toFind
---		grep --exclude="$toFind" -r "$toFind" . > $toFind
---	fi
--+if [[ $1 == *"s"* ]]
--+then
--+	echo "What tag should I look for?"
--+	read toFind
--+	grep --exclude="$toFind" -r "$toFind" . > $toFind
--+fi
-- 
---	if [[ $1 == *"d"* ]]
---	then
---			echo "Please enter a file name"
---			read fileName											#Could get input with flags although cleaner to do while running
---			echo "Enter default text"
---			read defaultText
---			cat workingTree.log |
---			while read targetDir 										#ToDo check if file already exists. Have flag for overwrite
---			do
---			
---					echo "Creating file ${fileName} in ${targetDir}"
---					cd $targetDir
---					touch ${fileName}
---			if [[ $1 == *"a"* ]]
---			then
---				echo ${defaultText} >> ${fileName}
---			else
---						echo ${defaultText} > ${fileName}
---			fi
---					cd ${Home}
---			done
---	fi
--+if [[ $1 == *"d"* ]]
--+then
--+        echo "Please enter a file name"
--+        read fileName											#Could get input with flags although cleaner to do while running
--+        echo "Enter default text"
--+        read defaultText
--+        cat workingTree.log |
--+        while read targetDir 										#ToDo check if file already exists. Have flag for overwrite
--+        do
--+		
--+                echo "Creating file ${fileName} in ${targetDir}"
--+                cd $targetDir
--+                touch ${fileName}
--+		if [[ $1 == *"a"* ]]
--+		then
--+			echo ${defaultText} >> ${fileName}
--+		else
--+                	echo ${defaultText} > ${fileName}
--+		fi
--+                cd ${Home}
--+        done
--+fi
-- 
---	if [[ $1 == *"q"* ]]
--+if [[ $1 == *"q"* ]]
-- 	then
---		echo "Staring Add Files"
---		git status -s | grep "?? \| M \|M \|MM " | sed 's/.\{3\}//' |  			  	        	 #Sed is magic. Please don't touch
---		while read stuffToAdd
--+	echo "Staring Add Files"
--+	git status -s | grep "?? \| M \|M \|MM " | sed 's/.\{3\}//' |  			  	        	 #Sed is magic. Please don't touch
--+	while read stuffToAdd
--+	do
--+		find -name $(basename ${stuffToAdd}) -printf '%h\n' |  						#This finds the files and leaves just the path
--+		while read inDir
-- 		do
---			find -name $(basename ${stuffToAdd}) -printf '%h\n' |  						#This finds the files and leaves just the path
---			while read inDir
---			do
---				cd ${inDir}
---				if [ -e $(basename "$stuffToAdd") ]							#File does not exist
--+			cd ${inDir}
--+			if [ -e $(basename "$stuffToAdd") ]							#File does not exist
--+			then
--+				CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 				#Going two sub-shells deep
--+				if [ "$CheckTag" != "#ignore" ]
-- 				then
---					CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 				#Going two sub-shells deep
---					if [ "$CheckTag" != "#ignore" ]
---					then
---							echo "Adding $(basename "$stuffToAdd") in ${inDir}"
---								git add $(basename "$stuffToAdd")                       #Basename to get rid of the path
---					else
---							echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
---					fi
--+						echo "Adding $(basename "$stuffToAdd") in ${inDir}"
--+							git add $(basename "$stuffToAdd")                       #Basename to get rid of the path
--+				else
--+						echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
-- 				fi
---				cd $Home
---			done
--+			fi
-- 			cd $Home
-- 		done
--+		cd $Home
--+	done
-- 
---		echo "Starting remove files"
---		git status -s | grep " D " | sed 's/.\{3\}//' | 							#Space needed
---		while read stuffToRm
---		do
---				git rm -f ${stuffToRm}
---		done
---	fi
--+	echo "Starting remove files"
--+	git status -s | grep " D " | sed 's/.\{3\}//' | 							#Space needed
--+	while read stuffToRm
--+	do
--+			git rm -f ${stuffToRm}
--+	done
--+fi
-- 
---	if [[ $1 == *"q"* ]]
---	then
---		echo -e "\n\n\nUpdated git status (To Update please use the -u flag)"						#All code that changes files should be above here
---		echo "---------------------------------"
---		git status
---	fi
--+if [[ $1 == *"q"* ]]
--+then
--+	echo -e "\n\n\nUpdated git status (To Update please use the -u flag)"						#All code that changes files should be above here
--+	echo "---------------------------------"
--+	git status
--+fi
-- 
---	if [[ $1 == *"q"* ]]
---	then
---			if [[ $1 == *"q"* ]]
---			then
---					echo "Sending commit with message ${2}"
---					git commit -m "${2}"
---		else
---			echo "Sending commit with default message"
---				git commit -m "$DefaultGitMsg"									#Set at the top of the program
---			fi
---	fi
--+if [[ $1 == *"q"* ]]
--+then
--+        if [[ $1 == *"q"* ]]
--+        then
--+                echo "Sending commit with message ${2}"
--+                git commit -m "${2}"
--+	else
--+		echo "Sending commit with default message"
--+        	git commit -m "$DefaultGitMsg"									#Set at the top of the program
--+        fi
--+fi
-- 
---	if [[ $1 == *"q"* ]]
---	then
---		git push
---	fi
---	
---	echo "Sleeping for " $UpdateFreq " Seconds"
---	sleep $UpdateFreq
---done
--\ No newline at end of file
--+if [[ $1 == *"q"* ]]
--+then
--+	git push
--+fi
--
--
--[0;32mNew and Modified[1;37m
--../setupUpdate
--../update
--../.update.swp
--../Elm/Hand Assembly.iam
--../Elm/fast.elm
--../Night in the Woods/
--../changes.log
--
--
--[0;32mRemoved files:[1;37m
-diff --git a/setupUpdate b/setupUpdate
-index 4e5b9de..7929e83 100644
---- a/setupUpdate
-+++ b/setupUpdate
-@@ -15,6 +15,8 @@ echo "Enter git repo for sync"
- read p
- echo "Repo: " $p >> update.sc
- 
-+git clone "$p"
-+
- echo "Enter git username"
- read p
- echo "User: " $p >> update.sc   
-diff --git a/update b/update
-index afbee83..3ec1bb6 100644
---- a/update
-+++ b/update
-@@ -6,137 +6,129 @@ Space="\t\t\t\t\t\t\t"
- Format=${Space}${Green}
- Home=$(pwd)												#Executes Pwd so the Dir does not change while running
- DefaultGitMsg="Default commit message"									#This is used if the -m flag is not given
--UpdateFreq=$(grep "Update:" update.sc | sed 's/.\{9\}//')
- 
--for (( ; ; ))
--do
--
--	if [[ $1 = "help" ]]
--	then
--		cat testScrMan
--		exit 0
--	fi
-+if [[ $1 = "help" ]]
-+then
-+	cat testScrMan
-+	exit 0
-+fi
- 
- 
--	file=./update.sc
--	if [ -e "$file" ]
--	then
--		echo "Config File Loaded"
--	else 
--		echo "Config Not found!"
--		echo "Starting Setup"
--		./setupUpdate
--		exit 0
--	fi
-+file=./configData
-+if [ -e "$file" ]
-+then
-+    echo "Config File Loaded"
-+else 
-+	echo "Config Not found!"
-+	echo "Starting Setup"
-+	./setupUpdate
-+	exit 0
-+fi
- 
--	if [[ $1 == *"i"* ]]
--	then
--		cd $Home											# CD to script root for no apparent reason 
--		./funProjectAnalyze.sh										#(Huge problem having both modes in one script. Mostly related to args now working)
--		exit 0              										# Exit when the functional script is closed
--	fi
-+if [[ $1 == *"i"* ]]
-+then
-+	cd $Home											# CD to script root for no apparent reason 
-+	./funProjectAnalyze.sh										#(Huge problem having both modes in one script. Mostly related to args now working)
-+	exit 0              										# Exit when the functional script is closed
-+fi
- 
--	echo "Root directory is set to: ${Home}"
--	if [[ $1 == *"t"* ]]
--	then
--		cat startupData |
--		while read stuffToDo
--		do
--				echo -e "${stuffToDo}${Format}[OK]${White}" 						#Loops through a textfile inserting it before the [OK]
--			sleep 0.5
--		done
--	fi
-+echo "Root directory is set to: ${Home}"
-+if [[ $1 == *"t"* ]]
-+then
-+	cat startupData |
-+	while read stuffToDo
-+	do
-+        	echo -e "${stuffToDo}${Format}[OK]${White}" 						#Loops through a textfile inserting it before the [OK]
-+		sleep 0.5
-+	done
-+fi
- 
--	git status
-+git status
- 
--	if [[ $1 == *"s"* ]]
--	then
--		echo "What tag should I look for?"
--		read toFind
--		grep --exclude="$toFind" -r "$toFind" . > $toFind
--	fi
-+if [[ $1 == *"s"* ]]
-+then
-+	echo "What tag should I look for?"
-+	read toFind
-+	grep --exclude="$toFind" -r "$toFind" . > $toFind
-+fi
- 
--	if [[ $1 == *"d"* ]]
--	then
--			echo "Please enter a file name"
--			read fileName											#Could get input with flags although cleaner to do while running
--			echo "Enter default text"
--			read defaultText
--			cat workingTree.log |
--			while read targetDir 										#ToDo check if file already exists. Have flag for overwrite
--			do
--			
--					echo "Creating file ${fileName} in ${targetDir}"
--					cd $targetDir
--					touch ${fileName}
--			if [[ $1 == *"a"* ]]
--			then
--				echo ${defaultText} >> ${fileName}
--			else
--						echo ${defaultText} > ${fileName}
--			fi
--					cd ${Home}
--			done
--	fi
-+if [[ $1 == *"d"* ]]
-+then
-+        echo "Please enter a file name"
-+        read fileName											#Could get input with flags although cleaner to do while running
-+        echo "Enter default text"
-+        read defaultText
-+        cat workingTree.log |
-+        while read targetDir 										#ToDo check if file already exists. Have flag for overwrite
-+        do
-+		
-+                echo "Creating file ${fileName} in ${targetDir}"
-+                cd $targetDir
-+                touch ${fileName}
-+		if [[ $1 == *"a"* ]]
-+		then
-+			echo ${defaultText} >> ${fileName}
-+		else
-+                	echo ${defaultText} > ${fileName}
-+		fi
-+                cd ${Home}
-+        done
-+fi
- 
--	if [[ $1 == *"q"* ]]
-+if [[ $1 == *"q"* ]]
- 	then
--		echo "Staring Add Files"
--		git status -s | grep "?? \| M \|M \|MM " | sed 's/.\{3\}//' |  			  	        	 #Sed is magic. Please don't touch
--		while read stuffToAdd
-+	echo "Staring Add Files"
-+	git status -s | grep "?? \| M \|M \|MM " | sed 's/.\{3\}//' |  			  	        	 #Sed is magic. Please don't touch
-+	while read stuffToAdd
-+	do
-+		find -name $(basename ${stuffToAdd}) -printf '%h\n' |  						#This finds the files and leaves just the path
-+		while read inDir
- 		do
--			find -name $(basename ${stuffToAdd}) -printf '%h\n' |  						#This finds the files and leaves just the path
--			while read inDir
--			do
--				cd ${inDir}
--				if [ -e $(basename "$stuffToAdd") ]							#File does not exist
-+			cd ${inDir}
-+			if [ -e $(basename "$stuffToAdd") ]							#File does not exist
-+			then
-+				CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 				#Going two sub-shells deep
-+				if [ "$CheckTag" != "#ignore" ]
- 				then
--					CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 				#Going two sub-shells deep
--					if [ "$CheckTag" != "#ignore" ]
--					then
--							echo "Adding $(basename "$stuffToAdd") in ${inDir}"
--								git add $(basename "$stuffToAdd")                       #Basename to get rid of the path
--					else
--							echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
--					fi
-+						echo "Adding $(basename "$stuffToAdd") in ${inDir}"
-+							git add $(basename "$stuffToAdd")                       #Basename to get rid of the path
-+				else
-+						echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
- 				fi
--				cd $Home
--			done
-+			fi
- 			cd $Home
- 		done
-+		cd $Home
-+	done
- 
--		echo "Starting remove files"
--		git status -s | grep " D " | sed 's/.\{3\}//' | 							#Space needed
--		while read stuffToRm
--		do
--				git rm -f ${stuffToRm}
--		done
--	fi
-+	echo "Starting remove files"
-+	git status -s | grep " D " | sed 's/.\{3\}//' | 							#Space needed
-+	while read stuffToRm
-+	do
-+			git rm -f ${stuffToRm}
-+	done
-+fi
- 
--	if [[ $1 == *"q"* ]]
--	then
--		echo -e "\n\n\nUpdated git status (To Update please use the -u flag)"						#All code that changes files should be above here
--		echo "---------------------------------"
--		git status
--	fi
-+if [[ $1 == *"q"* ]]
-+then
-+	echo -e "\n\n\nUpdated git status (To Update please use the -u flag)"						#All code that changes files should be above here
-+	echo "---------------------------------"
-+	git status
-+fi
- 
--	if [[ $1 == *"q"* ]]
--	then
--			if [[ $1 == *"q"* ]]
--			then
--					echo "Sending commit with message ${2}"
--					git commit -m "${2}"
--		else
--			echo "Sending commit with default message"
--				git commit -m "$DefaultGitMsg"									#Set at the top of the program
--			fi
--	fi
-+if [[ $1 == *"q"* ]]
-+then
-+        if [[ $1 == *"q"* ]]
-+        then
-+                echo "Sending commit with message ${2}"
-+                git commit -m "${2}"
-+	else
-+		echo "Sending commit with default message"
-+        	git commit -m "$DefaultGitMsg"									#Set at the top of the program
-+        fi
-+fi
- 
--	if [[ $1 == *"q"* ]]
--	then
--		git push
--	fi
--	
--	echo "Sleeping for " $UpdateFreq " Seconds"
--	sleep $UpdateFreq
--done
-\ No newline at end of file
-+if [[ $1 == *"q"* ]]
-+then
-+	git push
-+fi
-
-
-[0;32mNew and Modified[1;37m
-../setupUpdate
-../update
-../.update.swp
-../Elm/Hand Assembly.iam
-../Elm/fast.elm
-../Night in the Woods/
-../changes.log
-
-
-[0;32mRemoved files:[1;37m
diff --git a/setupUpdate b/setupUpdate
index 4e5b9de..7929e83 100644
--- a/setupUpdate
+++ b/setupUpdate
@@ -15,6 +15,8 @@ echo "Enter git repo for sync"
 read p
 echo "Repo: " $p >> update.sc
 
+git clone "$p"
+
 echo "Enter git username"
 read p
 echo "User: " $p >> update.sc   
diff --git a/update b/update
index afbee83..3ec1bb6 100644
--- a/update
+++ b/update
@@ -6,137 +6,129 @@ Space="\t\t\t\t\t\t\t"
 Format=${Space}${Green}
 Home=$(pwd)												#Executes Pwd so the Dir does not change while running
 DefaultGitMsg="Default commit message"									#This is used if the -m flag is not given
-UpdateFreq=$(grep "Update:" update.sc | sed 's/.\{9\}//')
 
-for (( ; ; ))
-do
-
-	if [[ $1 = "help" ]]
-	then
-		cat testScrMan
-		exit 0
-	fi
+if [[ $1 = "help" ]]
+then
+	cat testScrMan
+	exit 0
+fi
 
 
-	file=./update.sc
-	if [ -e "$file" ]
-	then
-		echo "Config File Loaded"
-	else 
-		echo "Config Not found!"
-		echo "Starting Setup"
-		./setupUpdate
-		exit 0
-	fi
+file=./configData
+if [ -e "$file" ]
+then
+    echo "Config File Loaded"
+else 
+	echo "Config Not found!"
+	echo "Starting Setup"
+	./setupUpdate
+	exit 0
+fi
 
-	if [[ $1 == *"i"* ]]
-	then
-		cd $Home											# CD to script root for no apparent reason 
-		./funProjectAnalyze.sh										#(Huge problem having both modes in one script. Mostly related to args now working)
-		exit 0              										# Exit when the functional script is closed
-	fi
+if [[ $1 == *"i"* ]]
+then
+	cd $Home											# CD to script root for no apparent reason 
+	./funProjectAnalyze.sh										#(Huge problem having both modes in one script. Mostly related to args now working)
+	exit 0              										# Exit when the functional script is closed
+fi
 
-	echo "Root directory is set to: ${Home}"
-	if [[ $1 == *"t"* ]]
-	then
-		cat startupData |
-		while read stuffToDo
-		do
-				echo -e "${stuffToDo}${Format}[OK]${White}" 						#Loops through a textfile inserting it before the [OK]
-			sleep 0.5
-		done
-	fi
+echo "Root directory is set to: ${Home}"
+if [[ $1 == *"t"* ]]
+then
+	cat startupData |
+	while read stuffToDo
+	do
+        	echo -e "${stuffToDo}${Format}[OK]${White}" 						#Loops through a textfile inserting it before the [OK]
+		sleep 0.5
+	done
+fi
 
-	git status
+git status
 
-	if [[ $1 == *"s"* ]]
-	then
-		echo "What tag should I look for?"
-		read toFind
-		grep --exclude="$toFind" -r "$toFind" . > $toFind
-	fi
+if [[ $1 == *"s"* ]]
+then
+	echo "What tag should I look for?"
+	read toFind
+	grep --exclude="$toFind" -r "$toFind" . > $toFind
+fi
 
-	if [[ $1 == *"d"* ]]
-	then
-			echo "Please enter a file name"
-			read fileName											#Could get input with flags although cleaner to do while running
-			echo "Enter default text"
-			read defaultText
-			cat workingTree.log |
-			while read targetDir 										#ToDo check if file already exists. Have flag for overwrite
-			do
-			
-					echo "Creating file ${fileName} in ${targetDir}"
-					cd $targetDir
-					touch ${fileName}
-			if [[ $1 == *"a"* ]]
-			then
-				echo ${defaultText} >> ${fileName}
-			else
-						echo ${defaultText} > ${fileName}
-			fi
-					cd ${Home}
-			done
-	fi
+if [[ $1 == *"d"* ]]
+then
+        echo "Please enter a file name"
+        read fileName											#Could get input with flags although cleaner to do while running
+        echo "Enter default text"
+        read defaultText
+        cat workingTree.log |
+        while read targetDir 										#ToDo check if file already exists. Have flag for overwrite
+        do
+		
+                echo "Creating file ${fileName} in ${targetDir}"
+                cd $targetDir
+                touch ${fileName}
+		if [[ $1 == *"a"* ]]
+		then
+			echo ${defaultText} >> ${fileName}
+		else
+                	echo ${defaultText} > ${fileName}
+		fi
+                cd ${Home}
+        done
+fi
 
-	if [[ $1 == *"q"* ]]
+if [[ $1 == *"q"* ]]
 	then
-		echo "Staring Add Files"
-		git status -s | grep "?? \| M \|M \|MM " | sed 's/.\{3\}//' |  			  	        	 #Sed is magic. Please don't touch
-		while read stuffToAdd
+	echo "Staring Add Files"
+	git status -s | grep "?? \| M \|M \|MM " | sed 's/.\{3\}//' |  			  	        	 #Sed is magic. Please don't touch
+	while read stuffToAdd
+	do
+		find -name $(basename ${stuffToAdd}) -printf '%h\n' |  						#This finds the files and leaves just the path
+		while read inDir
 		do
-			find -name $(basename ${stuffToAdd}) -printf '%h\n' |  						#This finds the files and leaves just the path
-			while read inDir
-			do
-				cd ${inDir}
-				if [ -e $(basename "$stuffToAdd") ]							#File does not exist
+			cd ${inDir}
+			if [ -e $(basename "$stuffToAdd") ]							#File does not exist
+			then
+				CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 				#Going two sub-shells deep
+				if [ "$CheckTag" != "#ignore" ]
 				then
-					CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 				#Going two sub-shells deep
-					if [ "$CheckTag" != "#ignore" ]
-					then
-							echo "Adding $(basename "$stuffToAdd") in ${inDir}"
-								git add $(basename "$stuffToAdd")                       #Basename to get rid of the path
-					else
-							echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
-					fi
+						echo "Adding $(basename "$stuffToAdd") in ${inDir}"
+							git add $(basename "$stuffToAdd")                       #Basename to get rid of the path
+				else
+						echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
 				fi
-				cd $Home
-			done
+			fi
 			cd $Home
 		done
+		cd $Home
+	done
 
-		echo "Starting remove files"
-		git status -s | grep " D " | sed 's/.\{3\}//' | 							#Space needed
-		while read stuffToRm
-		do
-				git rm -f ${stuffToRm}
-		done
-	fi
+	echo "Starting remove files"
+	git status -s | grep " D " | sed 's/.\{3\}//' | 							#Space needed
+	while read stuffToRm
+	do
+			git rm -f ${stuffToRm}
+	done
+fi
 
-	if [[ $1 == *"q"* ]]
-	then
-		echo -e "\n\n\nUpdated git status (To Update please use the -u flag)"						#All code that changes files should be above here
-		echo "---------------------------------"
-		git status
-	fi
+if [[ $1 == *"q"* ]]
+then
+	echo -e "\n\n\nUpdated git status (To Update please use the -u flag)"						#All code that changes files should be above here
+	echo "---------------------------------"
+	git status
+fi
 
-	if [[ $1 == *"q"* ]]
-	then
-			if [[ $1 == *"q"* ]]
-			then
-					echo "Sending commit with message ${2}"
-					git commit -m "${2}"
-		else
-			echo "Sending commit with default message"
-				git commit -m "$DefaultGitMsg"									#Set at the top of the program
-			fi
-	fi
+if [[ $1 == *"q"* ]]
+then
+        if [[ $1 == *"q"* ]]
+        then
+                echo "Sending commit with message ${2}"
+                git commit -m "${2}"
+	else
+		echo "Sending commit with default message"
+        	git commit -m "$DefaultGitMsg"									#Set at the top of the program
+        fi
+fi
 
-	if [[ $1 == *"q"* ]]
-	then
-		git push
-	fi
-	
-	echo "Sleeping for " $UpdateFreq " Seconds"
-	sleep $UpdateFreq
-done
\ No newline at end of file
+if [[ $1 == *"q"* ]]
+then
+	git push
+fi


[0;32mNew and Modified[1;37m
../setupUpdate
../update
../.update.swp
../Elm/Hand Assembly.iam
../Elm/fast.elm
../Night in the Woods/
../changes.log


[0;32mRemoved files:[1;37m
