#!/bin/bash

Green="\033[0;32m"
White="\033[1;37m"
Space="\t\t\t\t\t\t\t"
Format=${Space}${Green}
Home=$(pwd)
DefaultGitMsg="Default commit message"

if [[ $1 = "--help" ]]
then
	cat testScrMan
	exit 0
fi

if [[ $1 == *"i"* ]]
then
	cd $Home
	./funScr			# Yes I am this lazy
fi

echo "Root directory is set to: ${Home}"
if [[ $1 != *"q"* ]]
then
	cat startupData |
	while read stuffToDo
	do
        	echo -e "${stuffToDo}${Format}[OK]${White}"
		sleep 0.5
	done
fi

git status
echo "Adding changes to log"
git status | grep "modified" > changes.log
grep --exclude="todo.log" -r "#ToDo" . > todo.log
find . -name "*.hs" | xargs ghc -fno-code > error.log

echo "Creating working tree log"
find -type d | sed "/git/d" > workingTree.log

if [[ $1 == *"d"* ]]
then
        echo "Please enter a file name"
        read fileName
        echo "Enter default text"
        read defaultText
        cat workingTree.log |
        while read targetDir #ToDo check if file already exists. Have flag for overwrite
        do
		
                echo "Creating file ${fileName} in ${targetDir}"
                cd $targetDir
                touch ${fileName}
		if [[ $1 == *"a"* ]]
		then
			echo ${defaultText} >> ${fileName}
		else
                	echo ${defaultText} > ${fileName}
		fi
                cd ${Home}
        done
fi


echo "Staring Add Files"
git status -s | grep "??*\|M" | sed 's/.\{3\}//' |  					        #Sed is magic. Please don't touch
while read stuffToAdd
do
	find -name $(basename ${stuffToAdd}) -printf '%h\n' |  					#This finds the files and leaves just the path
	while read inDir
	do
		cd ${inDir}
		if [ -e $(basename "$stuffToAdd") ]
		then
			CheckTag=$(grep "#ignore" $(basename "$stuffToAdd")) 			#Going two sub-shells deep
			if [ "$CheckTag" != "#ignore" ]
			then
        			echo "Adding $(basename "$stuffToAdd") in ${inDir}"
               			git add $(basename "$stuffToAdd")
			else
        			echo "Found #ignore tag: $(basename "$stuffToAdd") ignored"
			fi
		fi
		cd $Home
	done
	cd $Home
done

echo "Starting remove files"
git status -s | grep "D" | sed 's/.\{3\}//' |
while read stuffToRm
do
        git rm -f ${stuffToRm}
done

echo -e "\n\n\nUpdated git status"
echo "---------------------------------"
git status

if [[ $1 == *"u"* ]]
then
        if [[ $1 == *"m"* ]]
        then
                echo "Sending commit with message ${2}"
                git commit -m "${2}"
	else
		echo "Sending commit with default message"
        	git commit -m "Default auto commit"
        fi
fi

if [[ $1 == *"p"* ]]
then
	git push
fi
